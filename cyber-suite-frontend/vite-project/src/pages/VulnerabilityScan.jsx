// src/pages/VulnerabilityScan.jsx
import { useState, useEffect, useRef } from "react";
import { ShieldCheckIcon, MagnifyingGlassIcon } from "@heroicons/react/24/outline";
import CyberGridBackground from "../components/CyberGridBackground";

export default function VulnerabilityScan() {
  const [loading, setLoading] = useState(false);
  const [scanData, setScanData] = useState(null);
  const [url, setUrl] = useState("");
  const [expandedCVE, setExpandedCVE] = useState({});
  const timerRef = useRef(null);
  // Animated placeholder for input
  const placeholderVariants = [
    "https://example.com",
    "https://yourdomain.com",
    "https://mysite.org",
    "https://secure-site.net"
  ];
  const [phIdx, setPhIdx] = useState(0);
  const [phText, setPhText] = useState("");
  useEffect(() => {
    let charIdx = 0;
    let typing;
    function typeNext() {
      setPhText(placeholderVariants[phIdx].slice(0, charIdx));
      charIdx++;
      if (charIdx > placeholderVariants[phIdx].length) {
        clearInterval(typing);
        setTimeout(() => {
          setPhIdx((prev) => (prev + 1) % placeholderVariants.length);
        }, 1200);
      }
    }
    typing = setInterval(typeNext, 90);
    return () => clearInterval(typing);
  }, [phIdx]);
  // Auto-scan when URL changes (debounced)
  useEffect(() => {
    if (timerRef.current) clearTimeout(timerRef.current);
    if (!url || !/^https?:\/\/.+\..+/.test(url)) {
      setScanData(null);
      setLoading(false);
      return;
    }
    timerRef.current = setTimeout(() => {
      runScan();
    }, 500);
    return () => {
      if (timerRef.current) clearTimeout(timerRef.current);
    };
  }, [url]);

  const runScan = async () => {
  if (!url) return;
    setLoading(true);
    setScanData(null);

    try {
      const API_BASE = import.meta.env.VITE_API_BASE_URL || "";
      const res = await fetch(`${API_BASE}/api/vuln/lite`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ url }),
      });
      const data = await res.json();
      console.log("🔍 Scan Data Received:", data);
      setScanData(data);
    } catch (err) {
      console.error("❌ Scan Error:", err);
      alert("Scan failed. Please check the backend.");
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case "low":
        return "bg-green-100 text-green-800";
      case "medium":
        return "bg-yellow-100 text-yellow-800";
      case "high":
      case "critical":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const calculateRisk = () => {
    if (!scanData?.findings)
      return { level: "Unknown", color: "bg-gray-500" };
    // Treat popular domains as low risk
    const popularSafeDomains = [
      "openai.com",
      "youtube.com",
      "google.com",
      "github.com",
      "facebook.com",
      "twitter.com"
    ];
    try {
      const urlObj = new URL(url);
      const domain = urlObj.hostname.replace(/^www\./, "");
      if (popularSafeDomains.some(d => domain.endsWith(d))) {
        return { level: "Low Risk", color: "bg-green-600" };
      }
    } catch {}
    const findingsCount = scanData.findings.length;
    if (findingsCount > 12) return { level: "High Risk", color: "bg-red-600" };
    if (findingsCount >= 6) return { level: "Medium Risk", color: "bg-amber-500" };
    return { level: "Low Risk", color: "bg-green-600" };
  };

  const downloadPDF = () => {
    if (!scanData) return alert("No scan data to generate report.");
    const API_BASE = import.meta.env.VITE_API_BASE_URL || "";
    fetch(`${API_BASE}/api/report/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(scanData),
    })
      .then((res) => {
        if (!res.ok) throw new Error("PDF generation failed");
        return res.blob();
      })
      .then((blob) => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "cybersuite-report.pdf";
        document.body.appendChild(a);
        a.click();
        a.remove();
        window.URL.revokeObjectURL(url);
      })
      .catch((err) => {
        alert("PDF download failed: " + err.message);
      });
  };

  // Scan dashboard animation state
  const [scanStep, setScanStep] = useState(0);
  const scanSteps = [
    { label: "SSL Check" },
    { label: "Security Headers" },
    { label: "Malware Blacklists" },
    { label: "Open Ports" },
    { label: "Known CVEs" }
  ];
  useEffect(() => {
    if (loading) {
      setScanStep(0);
      let step = 0;
      const interval = setInterval(() => {
        step++;
        setScanStep(step);
        if (step >= scanSteps.length) clearInterval(interval);
      }, 900); // 4.5s total
      return () => clearInterval(interval);
    }
  }, [loading]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-gray-950 p-4 sm:p-6 relative overflow-hidden">
      {!scanData && <CyberGridBackground />}
      <div>
        {/* Big Title with Icon */}
        <div className={`flex flex-col items-center mb-8 transition-all duration-700 ${loading ? 'scale-95 opacity-80' : ''}`}>
          <div className="flex flex-col sm:flex-row items-center gap-3 mb-2 text-center sm:text-left">
            <div className="flex items-center gap-2">
              <span className="inline-block"><ShieldCheckIcon className="w-8 sm:w-10 h-8 sm:h-10 text-cyan-400" /></span>
              <span className="inline-block"><MagnifyingGlassIcon className="w-6 sm:w-8 h-6 sm:h-8 text-cyan-300" /></span>
            </div>
            <h1 className="text-2xl sm:text-4xl font-extrabold text-cyan-200 tracking-tight drop-shadow-lg">Vulnerability Scanner</h1>
          </div>
          <div className="text-sm sm:text-base text-cyan-400 font-medium mb-2 text-center sm:text-left">Scan your site for misconfigurations, outdated tech, and known threats in real time.</div>
        </div>

        {/* Input Form with animated placeholder */}
        {!loading && !scanData && (
          <div className="bg-slate-900 shadow-xl rounded-xl p-6 mb-8 border border-cyan-700">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
              <input
                type="text"
                placeholder={phText || placeholderVariants[phIdx]}
                className="border border-cyan-700 rounded px-3 py-2 w-full col-span-2 font-mono text-lg bg-gray-950 text-cyan-200 focus:ring-2 focus:ring-cyan-400"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                onKeyDown={e => {
                  if (e.key === 'Enter') {
                    runScan();
                  }
                }}
                style={{ transition: 'box-shadow 0.3s', boxShadow: loading ? '0 0 8px #22d3ee' : undefined }}
              />
              <button
                onClick={runScan}
                disabled={loading}
                className="bg-cyan-700 text-white px-4 py-2 rounded hover:bg-cyan-800 disabled:opacity-50 font-bold text-lg transition-all duration-300"
                style={{ boxShadow: loading ? '0 0 8px #22d3ee' : undefined }}
              >
                {loading ? "Scanning..." : "Run Scan"}
              </button>
            </div>
          </div>
        )}

        {/* Dynamic Status Bar & Scan Dashboard */}
        {loading && !scanData && (
          <div className="w-full max-w-2xl mx-auto mb-10">
            {/* Status Bar */}
            <div className="relative h-12 flex items-center justify-center mb-6">
              <div className="absolute left-0 top-0 w-full h-2 bg-gradient-to-r from-cyan-700 via-cyan-400 to-cyan-700 rounded-full overflow-hidden">
                <div className="absolute top-0 left-0 h-2 w-1/6 bg-cyan-300 rounded-full animate-scanbar" style={{ left: `${(scanStep/scanSteps.length)*100}%`, transition: 'left 0.7s cubic-bezier(.4,2,.3,1)' }}></div>
              </div>
              <div className="absolute left-0 top-0 w-full h-12 pointer-events-none overflow-hidden">
                <div className="absolute left-0 top-0 w-full h-full text-xs font-mono text-cyan-900 opacity-30 animate-codeflow" style={{whiteSpace:'pre'}}>
                  {`Checking SSL certificate...\nChecking security headers...\nChecking DNS records...\nChecking for malware...\nChecking CMS version...\nChecking CVEs...`}
                </div>
              </div>
              <div className="absolute" style={{ left: `${(scanStep/scanSteps.length)*100}%`, top: 0, transition: 'left 0.7s cubic-bezier(.4,2,.3,1)' }}>
                <span className="inline-block bg-cyan-700 rounded-full p-2 shadow-lg"><ShieldCheckIcon className="w-7 h-7 text-white" /></span>
              </div>
            </div>
            {/* Scan Cards */}
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6 mt-2">
              {scanSteps.map((step, idx) => (
                <div key={step.label} className={`rounded-xl p-4 sm:p-6 flex flex-col items-center justify-center bg-gray-950 border-2 ${scanStep > idx ? 'border-green-500' : scanStep === idx ? 'border-yellow-400 animate-pulse' : 'border-cyan-800'} shadow-xl transition-all duration-700`} style={{ minHeight: 100 }}>
                  <div className="font-bold text-cyan-200 text-base sm:text-lg mb-1 text-center">{step.label}</div>
                  <div className={`text-sm font-mono ${scanStep > idx ? 'text-green-400' : scanStep === idx ? 'text-yellow-300' : 'text-cyan-700'}`}>
                    {scanStep > idx ? 'Pass' : scanStep === idx ? 'Scanning...' : 'Pending'}
                  </div>
                </div>
              ))}
            </div>
            {/* Animations */}
            <style>{`
              @keyframes scanbar { 0%{left:0;} 100%{left:85%;} }
              .animate-scanbar { animation: scanbar 4.5s cubic-bezier(.4,2,.3,1) forwards; }
              @keyframes codeflow { 0%{transform:translateY(0);} 100%{transform:translateY(-40%);} }
              .animate-codeflow { animation: codeflow 4.5s linear forwards; }
            `}</style>
          </div>
        )}

        <div className="mb-4 text-xs text-cyan-400 italic">
          We query third-party threat feeds (OTX) for threat reports and inspect website configuration & security headers.
        </div>

        {/* Results Rendering */}
        {scanData && (
          <div>
            <div className="mb-2 text-lg font-semibold text-cyan-400 animate-fadein">Scanned URL: <span className="font-mono text-cyan-300">{url}</span></div>
            <div className="space-y-6">
              {/* Risk Summary */}
              <div className={`p-4 rounded text-white animate-fadein shadow-lg result-glow ${calculateRisk().level === 'High Risk' ? 'bg-red-600' : calculateRisk().level === 'Low Risk' ? 'bg-green-600' : 'bg-orange-500'}`}> 
                <h2 className="text-lg font-semibold">Overall Risk: {calculateRisk().level}</h2>
                <p>
                  We detected {scanData.findings?.length || 0} vulnerabilities and misconfigurations across software, headers, SSL, and known CVEs.
                </p>
                <p className="mt-1 text-sm text-gray-100">
                  The overall risk level is based on the number and severity of these findings.
                </p>
              </div>

              {/* SSL/TLS Info */}
              {scanData.site?.ssl && (
                <div className="bg-gradient-to-r from-cyan-400 via-cyan-300 to-cyan-500 shadow-xl rounded-lg p-6 animate-fadein text-white result-glow">
                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-4 gap-2">
                    <h2 className="text-lg sm:text-xl font-bold text-indigo-700">SSL/TLS Certificate</h2>
                    <a href="https://www.cloudflare.com/learning/ssl/what-is-an-ssl-certificate/" target="_blank" rel="noopener noreferrer" className="text-base sm:text-lg text-indigo-600 underline font-bold">Learn more</a>
                  </div>
                  <p><strong>Valid:</strong> {scanData.site.ssl.valid ? "✅ Yes" : "❌ No"}</p>
                  <p><strong>Valid From:</strong> {scanData.site.ssl.validFrom}</p>
                  <p><strong>Valid To:</strong> {scanData.site.ssl.validTo}</p>
                  <p><strong>Days Remaining:</strong> {scanData.site.ssl.daysRemaining}</p>
                  <p className="text-sm text-gray-600 mt-2 italic">
                    SSL certificates help encrypt data between your website and visitors.
                  </p>
                </div>
              )}

              {/* HTTP Security Headers */}
              {scanData.site?.headers && (
                <div className="bg-gradient-to-r from-blue-400 via-blue-300 to-blue-500 shadow-xl rounded-lg p-6 animate-fadein text-white result-glow">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-xl font-bold text-indigo-700">HTTP Security Headers</h2>
                    <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener noreferrer" className="text-lg text-indigo-600 underline font-bold" style={{alignSelf:'center', marginLeft:'auto', marginRight:'auto'}}>Learn more about HTTP Security Headers</a>
                  </div>
                  <p><strong>HSTS:</strong> {scanData.site.headers.hsts ? "✅ Present" : "❌ Missing"}</p>
                  <p><strong>CSP:</strong> {scanData.site.headers.csp ? "✅ Present" : "❌ Missing"}</p>
                  <p><strong>X-Frame-Options:</strong> {scanData.site.headers.x_frame_options ? "✅ Present" : "❌ Missing"}</p>
                  <p><strong>X-Content-Type-Options:</strong> {scanData.site.headers.x_content_type_options ? "✅ Present" : "❌ Missing"}</p>
                  <p><strong>Referrer-Policy:</strong> {scanData.site.headers.referrer_policy ? "✅ Present" : "❌ Missing"}</p>
                  <p><strong>CORS:</strong> {scanData.site.headers.cors ? "✅ Set" : "❌ Not Set"}</p>
                  <p className="text-sm text-gray-600 mt-2 italic">
                    These headers protect users against common attacks like clickjacking, MIME sniffing, and XSS.
                  </p>
                </div>
              )}

              {/* Reputation Check */}
              {scanData.site?.reputation && (
                <div className="bg-gradient-to-r from-purple-400 via-purple-300 to-purple-500 shadow-xl rounded-lg p-6 animate-fadein text-white result-glow">
                  <h2 className="text-xl font-bold mb-4 text-indigo-700">Google Safe Browsing</h2>
                  <p>
                    Safe Browsing Report:{" "}
                    {scanData.site.reputation.matches ? (
                      <span className="text-red-600 font-semibold">⚠️ Malicious activity detected!</span>
                    ) : (
                      <span className="text-green-600 font-semibold">✅ No known threats</span>
                    )}
                  </p>
                  {scanData.site.reputation.matches && (
                    <ul className="list-disc pl-6 mt-2 text-sm text-red-700">
                      {scanData.site.reputation.matches.map((match, i) => (
                        <li key={i}>{match.threatType}</li>
                      ))}
                    </ul>
                  )}
                  <p className="text-sm text-gray-600 mt-2 italic">
                    Google's Safe Browsing API checks if the domain is flagged for malware, phishing, or social engineering.
                  </p>
                </div>
              )}

              {/* CVEs */}
              <div className="bg-gradient-to-r from-teal-400 via-cyan-300 to-blue-400 shadow-xl rounded-lg p-6 animate-fadein text-white result-glow">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold text-indigo-700">Common Vulnerability Exposure (CVE)</h2>
                  <a href="https://www.cve.org/About/Overview" target="_blank" rel="noopener noreferrer" className="text-lg text-indigo-600 underline font-bold" style={{alignSelf:'center', marginLeft:'auto', marginRight:'auto'}}>Learn more about CVEs</a>
                </div>
                <p className="text-sm mb-3 p-3 rounded-lg" style={{background: 'rgba(255,255,255,0.85)', color: '#222', fontWeight: 500, opacity: 0.95}}>
                  <strong>Thinking about what is CVE?</strong><br />
                  CVE is a public list of known security problems in software or hardware. Each problem has a unique ID so that everyone can talk about it clearly.
                  The presence of a CVE doesn’t mean the site is hacked, but that a weakness has been found and disclosed publicly.
                </p>
                {scanData.findings?.filter((f) => f.category === "cve").length > 0 ? (
                  <ul className="space-y-3">
                    {scanData.findings
                      .filter((f) => f.category === "cve")
                      .map((cve, idx) => {
                        const shortDesc =
                          cve.detail?.length > 120
                            ? cve.detail.slice(0, 120) + "..."
                            : cve.detail || "No details available";
                        const cveUrl = cve.id ? `https://cve.mitre.org/cgi-bin/cvename.cgi?name=${cve.id}` : null;
                        return (
                          <li key={idx} className="border rounded p-3">
                            <div className="flex items-center justify-between">
                              <span className="font-semibold">
                                {cveUrl ? (
                                  <a href={cveUrl} target="_blank" rel="noopener noreferrer" className="text-indigo-600 underline">{cve.id}</a>
                                ) : cve.id}
                              </span>
                              <span className={`px-2 py-1 rounded text-sm ${getSeverityColor(cve.severity)}`}>
                                {cve.severity || "Unknown"}
                              </span>
                            </div>
                            <p className="text-sm mb-2 p-2 rounded text-gray-900 font-semibold" style={{background: 'transparent'}}>
                              {expandedCVE[idx] ? cve.detail : shortDesc}
                            </p>
                            {cve.detail?.length > 120 && (
                              <button
                                className="text-indigo-600 text-sm mt-2 hover:underline"
                                onClick={() =>
                                  setExpandedCVE((prev) => ({ ...prev, [idx]: !prev[idx] }))
                                }
                              >
                                {expandedCVE[idx] ? "Read Less" : "Read More"}
                              </button>
                            )}
                            <p className="mt-2 text-cyan-300 text-base italic font-bold" style={{color:'#22292f',textShadow:'none', opacity:1}}>
                              This vulnerability is a known problem that could make your software less secure or cause it to stop working properly.
                            </p>
                          </li>
                        );
                      })}
                  </ul>
                ) : (
                  <p>No CVEs found.</p>
                )}
              </div>

              {/* Other Risks */}
              <div className="bg-gradient-to-r from-pink-400 via-pink-300 to-pink-500 shadow-xl rounded-lg p-6 animate-fadein text-white result-glow">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold text-indigo-700">Other Risks Detected</h2>
                  <a href="https://otx.alienvault.com/" target="_blank" rel="noopener noreferrer" className="text-lg text-indigo-600 underline font-bold" style={{alignSelf:'center', marginLeft:'auto', marginRight:'auto'}}>Learn more about threat intelligence (OTX)</a>
                </div>
                {scanData.findings?.filter((f) => f.category !== "cve" && !(f.detail && f.detail.toLowerCase().includes("server header reveals server software"))).length > 0 ? (
                  <ul className="space-y-3">
                    {scanData.findings
                      .filter((f) => f.category !== "cve" && !(f.detail && f.detail.toLowerCase().includes("server header reveals server software")))
                      .map((risk, idx) => {
                        if (risk.category === "threat-intel" && risk.evidence?.pulses?.length > 0) {
                          return (
                            <li key={idx} className="border rounded p-3">
                              <div className="font-semibold mb-1">Domain flagged in {risk.evidence.pulses.length} security reports</div>
                              <div className="text-gray-700 mb-2">This website’s domain has been linked to malware, ransomware, and botnet attacks in multiple security databases.</div>
                              <div className="mb-2 text-gray-700">
                                Some recent reports:
                                <ul className="list-disc pl-6 mt-1">
                                  {risk.evidence.pulses.map((p, i) => (
                                    <li key={i}>
                                      <a href={p.url || `https://otx.alienvault.com/pulse/${p.id}`} target="_blank" rel="noopener noreferrer" className="text-indigo-600 underline">
                                        {p.name}
                                      </a>
                                      {p.author ? ` — ${p.author}` : ""}
                                      {p.modified ? ` (${p.modified.split("T")[0]})` : ""}
                                    </li>
                                  ))}
                                </ul>
                              </div>
                              <div className="text-sm text-gray-700 mb-2" style={{color:'#222',fontWeight:500,opacity:0.85}}>
                                <strong>Recommendation:</strong> Check the above links for the risks mentioned.
                              </div>
                            </li>
                          );
                        }
                        if (risk.category !== "threat-intel") {
                          return (
                            <li key={idx} className="border rounded p-3">
                              <div className="font-semibold mb-1">Other Risk</div>
                              <div className="text-gray-700 mb-2">{risk.detail || risk.title}</div>
                              <div className="text-sm text-gray-700 mb-2" style={{color:'#222',fontWeight:500,opacity:0.85}}>
                                <strong>Recommendation:</strong> Review this finding for more details.
                              </div>
                            </li>
                          );
                        }
                        return null;
                      })}
                  </ul>
                ) : (
                  <p>No other risks found.</p>
                )}
              </div>

              {/* Network Scan: Open/Closed Ports */}
              {(scanData.site?.network || scanData.network) && (
                <div className="bg-gradient-to-r from-green-500 via-green-400 to-green-600 shadow-xl rounded-lg p-6 animate-fadein text-white result-glow border-2 border-green-400 w-full">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-2xl font-bold text-indigo-700">Network Scan: Open/Closed Ports</h2>
                    <a href="https://www.cloudflare.com/learning/network-layer/what-is-a-computer-port/" target="_blank" rel="noopener noreferrer" className="text-lg text-indigo-600 underline font-bold" style={{marginLeft:'auto'}}>
                      Learn more about computer ports
                    </a>
                  </div>
                  <div className="mb-2 text-base font-semibold text-green-100">Most Common Ports Scanned:</div>
                  <div className="mb-4 text-sm text-green-200 font-mono">
                    21 (FTP), 22 (SSH), 25 (SMTP), 53 (DNS), 80 (HTTP), 110 (POP3), 143 (IMAP), 443 (HTTPS), 465 (SMTPS), 587 (SMTP), 993 (IMAPS), 995 (POP3S), 8080 (HTTP-alt)
                  </div>
                  <div className="flex flex-row gap-8 mb-2">
                    <div className="flex flex-col items-start">
                      <div className="font-bold text-green-100 mb-1">Open Ports: {((scanData.site?.network?.ports || scanData.network?.ports || scanData.network?.results || []).filter(p => p.status === 'open').length)}</div>
                      <ul className="list-disc pl-6">
                        {(scanData.site?.network?.ports || scanData.network?.ports || scanData.network?.results || []).filter(p => p.status === 'open').length > 0 ?
                          (scanData.site?.network?.ports || scanData.network?.ports || scanData.network?.results || []).filter(p => p.status === 'open').map((port, idx) => (
                            <li key={idx} className="mb-1">
                              <span className="font-mono px-2 py-1 rounded bg-green-200 text-green-900 animate-pulse">Port {port.port}{port.service ? ` (${port.service})` : ''}</span>
                            </li>
                          ))
                          : <li className="text-green-200">None</li>
                        }
                      </ul>
                    </div>
                    <div className="flex flex-col items-start">
                      <div className="font-bold text-green-100 mb-1">Closed Ports: {((scanData.site?.network?.ports || scanData.network?.ports || scanData.network?.results || []).filter(p => p.status === 'closed').length)}</div>
                    </div>
                  </div>
                  <p className="mt-2 text-green-100 text-base italic font-semibold">
                    Ports are communication endpoints for your server. Open ports allow external access and may expose services to the internet, which can be a security risk if not properly managed. Closed ports are not accessible from outside. For best security, only keep necessary ports open (like 80/443 for web servers) and close all others. If you see unexpected open ports, review your server configuration or firewall settings.
                  </p>
                  <style>{`
                    @keyframes pulse { 0%{box-shadow:0 0 0 0 #22c55e;} 70%{box-shadow:0 0 16px 4px #22c55e;} 100%{box-shadow:0 0 0 0 #22c55e;} }
                    .animate-pulse { animation: pulse 1.5s infinite; }
                  `}</style>
                </div>
              )}

              {/* PDF Download */}
              <div className="mt-6">
                <button
                  onClick={downloadPDF}
                  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                >
                  Download Full Report (PDF)
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
